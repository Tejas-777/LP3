import java.util.Scanner;

public class NQueensWithFirstQueen {
    public static boolean isSafe(char[][] board, int row, int col) {
        // Vertical up
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }

        // Diagonal left up
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Diagonal right up
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        return true;
    }

    public static void nQueen(char board[][], int row) {
        if (row == board.length) {
            printBoard(board);
            return;
        }

        for (int j = 0; j < board.length; j++) {
            if (isSafe(board, row, j)) {
                board[row][j] = 'Q';
                nQueen(board, row + 1);
                board[row][j] = 'x';
            }
        }
    }

    public static void printBoard(char[][] board) {
        System.out.println("------Chess------");
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of chess board: ");
        int n = sc.nextInt();
        char board[][] = new char[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = 'x';
            }
        }

        System.out.println("Enter the row and column for the first queen (0-based indexing):");
        System.out.print("Row: ");
        int firstQueenRow = sc.nextInt();
        System.out.print("Column: ");
        int firstQueenCol = sc.nextInt();

        // Place the first queen at the user-specified position
        if (firstQueenRow >= 0 && firstQueenRow < n && firstQueenCol >= 0 && firstQueenCol < n) {
            board[firstQueenRow][firstQueenCol] = 'Q';
            nQueen(board, 1); // Start solving for the rest of the queens
        } else {
            System.out.println("Invalid position for the first queen.");
        }
    }
}
